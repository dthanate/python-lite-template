[tool.poetry]
name = "{{ cookiecutter.repo_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_desc }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
readme = "README.md"
packages = [ { include = "{{ cookiecutter.package_name }}" } ]

[tool.poetry.dependencies]
python = ">=3.12.1,<3.13"
ujson = ">=5.9.0"
dill = ">=0.3.8"
numpy = ">=1.26.4"
more-itertools = ">=10.2.0"
fsspec = ">=2024.2.0"

[tool.poetry.group.dev.dependencies]
mypy = ">=1.8.0"
bandit = ">=1.7.7"
pylint = ">=3.0.3"
pyright = ">=1.1.350"
reorder-python-imports = ">=3.12.0"
flakehell = ">=0.9.0"
jedi-language-server = ">=0.41.2"
black = ">=24.1.1"
pipdeptree = ">=2.13.2"
mypy-extensions = ">=1.0.0"
pynvim = ">=0.5.0"
setuptools = ">=68.2.2"
pysnooper = ">=1.2.0"
wheel = ">=0.42.0"
icecream = ">=2.1.3"

[tool.poetry.group.test.dependencies]
pytest = ">=8.0.0"
pytest-xdist = ">=3.5.0"
hypothesis = ">=6.98.2"

[tool.poetry.group.type.dependencies]
types-all = ">=1.0.0"

[tool.poetry_bumpversion.file."{{ cookiecutter.package_name }}/__init__.py"]

[tool.pylint]
jobs = 0
extension-pkg-allow-list = ["ujson", "pydantic"]

[tool.pylint.FORMAT]
max-line-length = 140

[tool.pylint."MESSAGE CONTROL"]
disable = [
  "missing-function-docstring",
  "missing-module-docstring",
  "missing-class-docstring",
  "invalid-name",
  "too-few-public-methods",
  "line-too-long",
  "import-outside-toplevel",
  "wrong-import-position",
  "wrong-import-order",
  "ungrouped-imports",
  "too-many-arguments",
  "too-many-instance-attributes",
  "too-many-branches",
  "too-many-statements",
  "too-many-locals",
  "too-many-return-statements",
  "too-many-nested-blocks",
  "too-many-boolean-expressions",
]

[tool.black]
line-length = 140
target-version = ["py312"]

[tool.mypy]
python_version = "3.12"
plugins = ["numpy.typing.mypy_plugin", "pydantic.mypy"]

follow_imports = "normal"
ignore_missing_imports = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = false # for strict mypy: (this is the tricky one :-))

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pyright]
typeCheckingMode = "strict"
reportMissingModuleSource = "none"
reportMissingImports = "none"
reportMissingTypeStubs = "none"
reportMissingParameterType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownLambdaType = "none"
reportGeneralTypeIssues = "none"
reportUnusedExpression = "none"
reportConstantRedefinition = "none"
reportUntypedFunctionDecorator = "none"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
